!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Accelerometer	.\iNEMO2_SDK.h	/^	Component_t Accelerometer;$/;"	m	struct:FrameData_s
Component_s	.\iNEMO2_SDK.h	/^typedef struct Component_s$/;"	s
Component_t	.\iNEMO2_SDK.h	/^} Component_t;$/;"	t	typeref:struct:Component_s
ComputeJacobian	.\ComputeJacobian.m	/^function [J] = ComputeJacobian(a,b,c,d,Ax,Ay,Az,Mx,My,Mz)$/;"	f
ComputeM_Matrix	.\ComputeM_Matrix.m	/^function [M] = ComputeM_Matrix(a,b,c,d)$/;"	f
Data	.\iNEMO2_SDK.h	/^	unsigned int Data;$/;"	m	struct:INEMO2_OUTPUT_s
FRAME_DATA_VALID_FIELD_ACC	.\iNEMO2_SDK.h	174;"	d
FRAME_DATA_VALID_FIELD_ALL	.\iNEMO2_SDK.h	182;"	d
FRAME_DATA_VALID_FIELD_GYRO	.\iNEMO2_SDK.h	175;"	d
FRAME_DATA_VALID_FIELD_MAG	.\iNEMO2_SDK.h	176;"	d
FRAME_DATA_VALID_FIELD_NONE	.\iNEMO2_SDK.h	172;"	d
FRAME_DATA_VALID_FIELD_PRES	.\iNEMO2_SDK.h	177;"	d
FRAME_DATA_VALID_FIELD_QUAT	.\iNEMO2_SDK.h	180;"	d
FRAME_DATA_VALID_FIELD_ROTAT	.\iNEMO2_SDK.h	179;"	d
FRAME_DATA_VALID_FIELD_TEMP	.\iNEMO2_SDK.h	178;"	d
FrameData_s	.\iNEMO2_SDK.h	/^typedef struct FrameData_s$/;"	s
FrameData_t	.\iNEMO2_SDK.h	/^}FrameData_t, *PFrameData_t;$/;"	t	typeref:struct:FrameData_s
Frequency	.\iNEMO2_SDK.h	/^	unsigned int Frequency;$/;"	m	struct:INEMO2_OUTPUT_s
GaussNewtonMethod	.\GaussNewtonMethod.m	/^function [n] = GaussNewtonMethod(q,Acc,Magn)$/;"	f
GetAnglesFromQuaternion	.\GetAnglesFromQuaternion.m	/^function [Angles] = GetAnglesFromQuaternion(q)$/;"	f
GradientDescent	.\GradientDescent.m	/^function [q_result] = GradientDescent(Acc,Magn,q,mu)$/;"	f
Gyroscope	.\iNEMO2_SDK.h	/^	Component_t Gyroscope;$/;"	m	struct:FrameData_s
INEMO2_BUFFERS_e	.\iNEMO2_SDK.h	/^typedef enum INEMO2_BUFFERS_e$/;"	g
INEMO2_BUFFERS_t	.\iNEMO2_SDK.h	/^}INEMO2_BUFFERS_t;$/;"	t	typeref:enum:INEMO2_BUFFERS_e
INEMO2_BUFFER_DATA_SAMPLE	.\iNEMO2_SDK.h	/^	INEMO2_BUFFER_DATA_SAMPLE = 0x00,$/;"	e	enum:INEMO2_BUFFERS_e
INEMO2_BUFFER_TRACE	.\iNEMO2_SDK.h	/^	INEMO2_BUFFER_TRACE = 0x01$/;"	e	enum:INEMO2_BUFFERS_e
INEMO2_CMD_ENTER_DFU_MODE	.\iNEMO2_SDK.h	/^	INEMO2_CMD_ENTER_DFU_MODE,$/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_LED_OFF	.\iNEMO2_SDK.h	/^	INEMO2_CMD_LED_OFF$/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_LED_ON	.\iNEMO2_SDK.h	/^	INEMO2_CMD_LED_ON,$/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_RESET_BOARD	.\iNEMO2_SDK.h	/^	INEMO2_CMD_RESET_BOARD,$/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_START_ACQUISTION	.\iNEMO2_SDK.h	/^	INEMO2_CMD_START_ACQUISTION = 0x01,  $/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_STOP_ACQUISTION	.\iNEMO2_SDK.h	/^	INEMO2_CMD_STOP_ACQUISTION,$/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_TRACE_OFF	.\iNEMO2_SDK.h	/^	INEMO2_CMD_TRACE_OFF,$/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_TRACE_ON	.\iNEMO2_SDK.h	/^	INEMO2_CMD_TRACE_ON,$/;"	e	enum:INEMO2_CMD_e
INEMO2_CMD_e	.\iNEMO2_SDK.h	/^typedef enum INEMO2_CMD_e$/;"	g
INEMO2_CMD_t	.\iNEMO2_SDK.h	/^}INEMO2_CMD_t;$/;"	t	typeref:enum:INEMO2_CMD_e
INEMO2_DEVICE_HANDLE	.\iNEMO2_SDK.h	/^typedef unsigned int INEMO2_DEVICE_HANDLE;$/;"	t
INEMO2_DEVICE_HANDLE_INVALID	.\iNEMO2_SDK.h	44;"	d
INEMO2_ERROR	.\iNEMO2_SDK.h	/^typedef unsigned int INEMO2_ERROR;$/;"	t
INEMO2_ERROR_CMD_UNKWOUN	.\iNEMO2_SDK.h	61;"	d
INEMO2_ERROR_DEVICE_ALREADY_CONNECT	.\iNEMO2_SDK.h	54;"	d
INEMO2_ERROR_DEVICE_FAIL_TO_OPEN	.\iNEMO2_SDK.h	55;"	d
INEMO2_ERROR_GET_INFO_UNKWOUN	.\iNEMO2_SDK.h	62;"	d
INEMO2_ERROR_HANDLE_NOT_OPENED	.\iNEMO2_SDK.h	52;"	d
INEMO2_ERROR_INVALID_FRAME_RECEIVED	.\iNEMO2_SDK.h	65;"	d
INEMO2_ERROR_INVALID_HANDLE	.\iNEMO2_SDK.h	51;"	d
INEMO2_ERROR_INVALID_PARAMETER	.\iNEMO2_SDK.h	53;"	d
INEMO2_ERROR_NACK_DEVICE_CMD_NOT_EXEC	.\iNEMO2_SDK.h	71;"	d
INEMO2_ERROR_NACK_DEVICE_CMD_UNSUP	.\iNEMO2_SDK.h	69;"	d
INEMO2_ERROR_NACK_DEVICE_FORBIDDEN	.\iNEMO2_SDK.h	68;"	d
INEMO2_ERROR_NACK_DEVICE_NOT_CONNECT	.\iNEMO2_SDK.h	73;"	d
INEMO2_ERROR_NACK_DEVICE_OUT_OF_RANGE	.\iNEMO2_SDK.h	70;"	d
INEMO2_ERROR_NACK_DEVICE_WRONG_SYNTAX	.\iNEMO2_SDK.h	72;"	d
INEMO2_ERROR_NONE	.\iNEMO2_SDK.h	50;"	d
INEMO2_ERROR_NO_FRAME_DATA_RECEIVED	.\iNEMO2_SDK.h	64;"	d
INEMO2_ERROR_NO_PROCESS_ADDRESS	.\iNEMO2_SDK.h	67;"	d
INEMO2_ERROR_NO_TRACE_DATA_RECEIVED	.\iNEMO2_SDK.h	63;"	d
INEMO2_ERROR_ON_DATA_RECEIVED	.\iNEMO2_SDK.h	66;"	d
INEMO2_ERROR_ON_READ_DATA_FRAME	.\iNEMO2_SDK.h	58;"	d
INEMO2_ERROR_ON_READ_DATA_MORE_BUFFER	.\iNEMO2_SDK.h	60;"	d
INEMO2_ERROR_ON_READ_INVALID_MEX_ID	.\iNEMO2_SDK.h	59;"	d
INEMO2_ERROR_ON_SEND_DATA_FRAME	.\iNEMO2_SDK.h	57;"	d
INEMO2_ERROR_ON_SET_DEVICE_FUNCTION	.\iNEMO2_SDK.h	56;"	d
INEMO2_INFOTEXT_AHRS_LIBRARY	.\iNEMO2_SDK.h	/^	INEMO2_INFOTEXT_AHRS_LIBRARY,$/;"	e	enum:INEMO2_INFOTEXT_e
INEMO2_INFOTEXT_FW_VERSION	.\iNEMO2_SDK.h	/^	INEMO2_INFOTEXT_FW_VERSION,$/;"	e	enum:INEMO2_INFOTEXT_e
INEMO2_INFOTEXT_HW_VERSION	.\iNEMO2_SDK.h	/^	INEMO2_INFOTEXT_HW_VERSION,$/;"	e	enum:INEMO2_INFOTEXT_e
INEMO2_INFOTEXT_MCUID	.\iNEMO2_SDK.h	/^	INEMO2_INFOTEXT_MCUID = 0x01,  $/;"	e	enum:INEMO2_INFOTEXT_e
INEMO2_INFOTEXT_e	.\iNEMO2_SDK.h	/^typedef enum INEMO2_INFOTEXT_e$/;"	g
INEMO2_INFOTEXT_t	.\iNEMO2_SDK.h	/^}INEMO2_INFOTEXT_t;$/;"	t	typeref:enum:INEMO2_INFOTEXT_e
INEMO2_MODULES_AHRS	.\iNEMO2_SDK.h	/^	INEMO2_MODULES_AHRS      = 0x00000001,$/;"	e	enum:INEMO2_MODULES_e
INEMO2_MODULES_ALTIMETER	.\iNEMO2_SDK.h	/^	INEMO2_MODULES_ALTIMETER = 0x00000004,$/;"	e	enum:INEMO2_MODULES_e
INEMO2_MODULES_COMPASS	.\iNEMO2_SDK.h	/^	INEMO2_MODULES_COMPASS   = 0x00000002,$/;"	e	enum:INEMO2_MODULES_e
INEMO2_MODULES_FAT	.\iNEMO2_SDK.h	/^	INEMO2_MODULES_FAT       = 0x00000010,$/;"	e	enum:INEMO2_MODULES_e
INEMO2_MODULES_NONE	.\iNEMO2_SDK.h	/^	INEMO2_MODULES_NONE      = 0x00000000,$/;"	e	enum:INEMO2_MODULES_e
INEMO2_MODULES_TRACE	.\iNEMO2_SDK.h	/^	INEMO2_MODULES_TRACE     = 0x00000008,$/;"	e	enum:INEMO2_MODULES_e
INEMO2_MODULES_e	.\iNEMO2_SDK.h	/^typedef enum INEMO2_MODULES_e$/;"	g
INEMO2_MODULES_t	.\iNEMO2_SDK.h	/^}INEMO2_MODULES_t;$/;"	t	typeref:enum:INEMO2_MODULES_e
INEMO2_OUTPUT_DATA_ACC	.\iNEMO2_SDK.h	83;"	d
INEMO2_OUTPUT_DATA_ALL	.\iNEMO2_SDK.h	89;"	d
INEMO2_OUTPUT_DATA_GYRO	.\iNEMO2_SDK.h	84;"	d
INEMO2_OUTPUT_DATA_MAG	.\iNEMO2_SDK.h	85;"	d
INEMO2_OUTPUT_DATA_PRESS	.\iNEMO2_SDK.h	86;"	d
INEMO2_OUTPUT_DATA_TEMP	.\iNEMO2_SDK.h	87;"	d
INEMO2_OUTPUT_FREQ_1	.\iNEMO2_SDK.h	93;"	d
INEMO2_OUTPUT_FREQ_10	.\iNEMO2_SDK.h	94;"	d
INEMO2_OUTPUT_FREQ_25	.\iNEMO2_SDK.h	95;"	d
INEMO2_OUTPUT_FREQ_50	.\iNEMO2_SDK.h	96;"	d
INEMO2_OUTPUT_MODE_AHRS	.\iNEMO2_SDK.h	81;"	d
INEMO2_OUTPUT_MODE_DEFAULT	.\iNEMO2_SDK.h	79;"	d
INEMO2_OUTPUT_MODE_RAW	.\iNEMO2_SDK.h	80;"	d
INEMO2_OUTPUT_SAMPLES_CONTINOUS	.\iNEMO2_SDK.h	98;"	d
INEMO2_OUTPUT_TYPE_USB	.\iNEMO2_SDK.h	91;"	d
INEMO2_OUTPUT_s	.\iNEMO2_SDK.h	/^typedef struct INEMO2_OUTPUT_s$/;"	s
INEMO2_OUTPUT_t	.\iNEMO2_SDK.h	/^}INEMO2_OUTPUT_t, *PINEMO2_OUTPUT_t;$/;"	t	typeref:struct:INEMO2_OUTPUT_s
INEMO2_SDK_API	.\iNEMO2_SDK.h	35;"	d
INEMO2_SDK_API	.\iNEMO2_SDK.h	37;"	d
INEMO2_SENSORS_ACC	.\iNEMO2_SDK.h	/^	INEMO2_SENSORS_ACC      = 0x00,$/;"	e	enum:INEMO2_SENSORS_e
INEMO2_SENSORS_GYRO_RP	.\iNEMO2_SDK.h	/^	INEMO2_SENSORS_GYRO_RP  = 0x02,$/;"	e	enum:INEMO2_SENSORS_e
INEMO2_SENSORS_GYRO_Y	.\iNEMO2_SDK.h	/^	INEMO2_SENSORS_GYRO_Y   = 0x03,$/;"	e	enum:INEMO2_SENSORS_e
INEMO2_SENSORS_MAG	.\iNEMO2_SDK.h	/^	INEMO2_SENSORS_MAG      = 0x01,$/;"	e	enum:INEMO2_SENSORS_e
INEMO2_SENSORS_PRESS	.\iNEMO2_SDK.h	/^	INEMO2_SENSORS_PRESS    = 0x04,$/;"	e	enum:INEMO2_SENSORS_e
INEMO2_SENSORS_TEMP	.\iNEMO2_SDK.h	/^	INEMO2_SENSORS_TEMP     = 0x05,$/;"	e	enum:INEMO2_SENSORS_e
INEMO2_SENSORS_e	.\iNEMO2_SDK.h	/^typedef enum INEMO2_SENSORS_e$/;"	g
INEMO2_SENSORS_t	.\iNEMO2_SDK.h	/^}INEMO2_SENSORS_t;$/;"	t	typeref:enum:INEMO2_SENSORS_e
INEMO_Connection	.\INEMO_Connection.m	/^function [handle_dev pFD] = INEMO_Connection()$/;"	f
INEMO_Disconnection	.\INEMO_Disconnection.m	/^function [] = INEMO_Disconnection(handle_dev)$/;"	f
Magnetometer	.\iNEMO2_SDK.h	/^	Component_t Magnetometer;$/;"	m	struct:FrameData_s
Mode	.\iNEMO2_SDK.h	/^	unsigned int Mode;$/;"	m	struct:INEMO2_OUTPUT_s
MyFilter	.\MyFilter.m	/^function [StateF] = MyFilter(b, a, State)$/;"	f
PFrameData_t	.\iNEMO2_SDK.h	/^}FrameData_t, *PFrameData_t;$/;"	t	typeref:struct:FrameData_s
PINEMO2_OUTPUT_t	.\iNEMO2_SDK.h	/^}INEMO2_OUTPUT_t, *PINEMO2_OUTPUT_t;$/;"	t	typeref:struct:INEMO2_OUTPUT_s
Pitch	.\iNEMO2_SDK.h	/^	float Pitch;$/;"	m	struct:Rotation_s
Pressure	.\iNEMO2_SDK.h	/^	unsigned short Pressure;$/;"	m	struct:FrameData_s
Q1	.\iNEMO2_SDK.h	/^	float Q1;$/;"	m	struct:Quaternion_s
Q2	.\iNEMO2_SDK.h	/^	float Q2;$/;"	m	struct:Quaternion_s
Q3	.\iNEMO2_SDK.h	/^	float Q3;$/;"	m	struct:Quaternion_s
Q4	.\iNEMO2_SDK.h	/^	float Q4;$/;"	m	struct:Quaternion_s
Quaternion	.\iNEMO2_SDK.h	/^	Quaternion_t Quaternion;$/;"	m	struct:FrameData_s
QuaternionProduct	.\QuaternionProduct.m	/^function [P] = QuaternionProduct(a,b)$/;"	f
Quaternion_s	.\iNEMO2_SDK.h	/^typedef struct Quaternion_s$/;"	s
Quaternion_t	.\iNEMO2_SDK.h	/^}Quaternion_t;$/;"	t	typeref:struct:Quaternion_s
Roll	.\iNEMO2_SDK.h	/^	float Roll;$/;"	m	struct:Rotation_s
Rotation	.\iNEMO2_SDK.h	/^	Rotation_t Rotation;$/;"	m	struct:FrameData_s
Rotation_s	.\iNEMO2_SDK.h	/^typedef struct Rotation_s$/;"	s
Rotation_t	.\iNEMO2_SDK.h	/^}Rotation_t;$/;"	t	typeref:struct:Rotation_s
SampleTimeStamp	.\iNEMO2_SDK.h	/^	unsigned int SampleTimeStamp;$/;"	m	struct:FrameData_s
Samples	.\iNEMO2_SDK.h	/^	unsigned int Samples;$/;"	m	struct:INEMO2_OUTPUT_s
Size	.\iNEMO2_SDK.h	/^	size_t Size;$/;"	m	struct:FrameData_s
Temperature	.\iNEMO2_SDK.h	/^	short Temperature;$/;"	m	struct:FrameData_s
Type	.\iNEMO2_SDK.h	/^	unsigned int Type;$/;"	m	struct:INEMO2_OUTPUT_s
ValidFields	.\iNEMO2_SDK.h	/^	unsigned int ValidFields;$/;"	m	struct:FrameData_s
X	.\iNEMO2_SDK.h	/^	short X;$/;"	m	struct:Component_s
Y	.\iNEMO2_SDK.h	/^	short Y;$/;"	m	struct:Component_s
Yaw	.\iNEMO2_SDK.h	/^	float Yaw;$/;"	m	struct:Rotation_s
Z	.\iNEMO2_SDK.h	/^	short Z;$/;"	m	struct:Component_s
__INEMO2_SDK_H_	.\iNEMO2_SDK.h	26;"	d
